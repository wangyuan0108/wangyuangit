笔记

交互：前端 -> 后台
ajax、jsonp

状态码：
    200     OK
    301     永久重定向
    302     临时重定向
    304     缓存没有更新
    403     没有权限
    404     找不到文件
    414     URL太长
    500     服务器错误
    502     服务器错误

    * 4XX 一般是前端的问题
    * 5XX 一般是后台的问题
CORS：

----------------------------------------

var str='a88 oo99 456 xx92df 25kh 90ww 66hh 22xx';

正则(正则表达式、规则表达式、Regular Expression)：非常非常简单

    规则：有一些人规定好的写法


为什么要学正则：
1、简单
2、性能极高

邮箱：2538114547@qq.com
    xxxxxx@qq.com
    555555@qq.com
    hhhhhh@163.com
    222222@qq.tt
    @qq.com
    222222@qq
    222222@qq.


    数字或者字母@字母或数字.字母

----------------------------------------

弄出来一个正则：
    var reg=new RegExp();
    var reg=new RegExp('c');

    str.search(正则); -> 和indexOf(); 非常相像

    var reg=new RegExp(内容, 选项);

    选项：
        i    ignore    忽略大小写
        g    global    全部
        m    mutil-line 多行(匹配回车)

简写：
    var reg=/3/;
    var reg=/C/i;

    var reg=/内容/选项;
转义：
\   
\d    digital    数字


str.match();  
没有匹配上,返回null
把所有匹配到的内容放到一个数组里面

量词：
    一头猪
    一只鸡
    一条狗

+：最少一个，最多不限

----------------------------------------

正则：只能操作字符串，建议，以后操作字符串能用正则用正则

正则特性：
1、懒
2、蠢

str.replace(被替换内容, 替换成什么);
str.replace(正则, 替换成什么);
str.replace(正则/被替换内容, function(s){
    // s -> 正则匹配上的内容
});

或：
    |


^：开头

var reg=/\d+/img;

量词：
    {n}   n个
    {n,m} 最少n个，最多m个
    {n,}  最少n个，最多不限

    + -> {1,}
    ? -> {0,1}
    * -> {0,}

    +    最少一个，最多不限
    ?    可有可无(0,1)
    *    可以没有，有了不限
方括号:[]
    1、[abc]  a|b|c
    2、[0-9]  \d 数字
       [a-z]  字母
       [A-Z]  大写字母
       [0-9a-zA-Z]  0-9或a-z或A-Z

       [0-22]   0-2或2   ×


匹配座机号：
    010-45645645

    0827
    0数字(2-3位)-  可以有，可以没有
    区号：(0\d{2,3}-)?

    非0 数字(6-7位)
    座机号：[1-9]

    检验座机号：
        (0\d{2,3}-)?[1-9]\d{6,7}    

    reg.test(str); -> 检测这个字符串符不符合正则

修饰：
^：开头
$：结尾

----------------------------------------

正则：
    var reg=new RegExp('内容', '选项');

    var reg=/内容/选项;

    选项：
        i    ignore   忽略大小写
        m    mutil-line 多行
        g    global   全部

    str.search(正则);    类似indexOf
    str.match(正则);
        把所有匹配项放到一个数组里面返回，
        如果找不到返回null

    reg.test(str); 
        检测字符串是否匹配正则

量词：
    {n}     n个
    {n,m}   最少n个，最多m个
    {n,}    最少n个，最多不限

    +   {1,}    最少一个，最多不限
    ?   {0,1}   可有可无
    *   {0,}    可以没有，有了不限

或：
    |
方括号：
    []

    1、[abc] -> a|b|c
    2、[3-6] -> 数字3-6
       [a-z]
       [A-Z]
       [0-9a-zA-Z]
修饰：
1、^ 开头
2、$ 结尾

^和m配合使用：多行
^：整个字符串的开头

----------------------------------------

正则：
    怎么弄出来一个正则：
        var reg=new RegExp('内容', '选项');

        var reg=/内容/选项;

    选项：
            1、i  ignore  忽略大小写
            2、m  mutil-line 多行
            3、g  global  全部

量词：
    {n}     n个
    {n,m}   最少n个，最多m个
    {n,}    最少n个，最多不限

    +   {1,}    最少1个，最多不限
    ?   {0,1}   可有可无
    *   {0,}    可以没有，有了不限
方括号：
    1、[abc]     a|b|c
    2、[0-9]     数字0-9
       [a-z]
    3、[^0-9]    取反

修饰：
^   开头
$   结尾

str.search();
str.match(正则);

str.replace(被替换的, 替换成什么);
str.replace(被替换的, function(s){
    // s
    return xx;
});

reg.test(str);      检测str是否匹配正则

转义：
\d   digital   数字
\w   word      单词或数字或_  [0-9a-zA-Z_]
\s   space     空白符

\D   非数字
\W   非单词数字_
\S   非空白符

\b   边界

. -> 任意字符
\.
\'

检验座机号：
    /^(0\d{2,3}-)?[1-9]\d{6,7}$/

年龄：18-100
    拆
    1[89]|[2-9]\d|100

姓名：汉字2-4
    /^[\u4e00-\u9fa5]{2,4}$/

邮箱：
    数字字母下划线@数字或字母-.字母{2,8}

    /^\w+@[0-9a-zA-Z-]+(\.[a-zA-Z]{2,8}){1,2}$/

----------------------------------------

首字母大写：

只能输入数字的文本框

请使用原生js实现一个trim

过滤html标签
    . -> 千万千万千万考虑好

批量加事件

getByClass

正则简写：不能接受变量

var reg=new RegExp(变量);

getByClass
addClass
hasClass
removeClass

----------------------------------------

作业：
    今天课件一遍
    个人站

----------------------------------------



